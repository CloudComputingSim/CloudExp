/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * $Id: UserName.java,v 1.1.1.1 2008/09/29 22:33:08 sp208304 Exp $
 * 
 * Modifications by: Rean Griffith 
 * 1) Changed package to include file in Rain harness
 */
package radlab.rain.workload.olio;

import java.util.HashSet;
import java.io.*;

/**
 * The user utility creates usernames and passwords from user ids.
 * It uses the scrambled character sequences generated by the Scramble
 * class. The username length distribution are controlled so 5% of the
 * users have 6 letter names, 8% of the users have 7 letter names,
 * 17% of the users have 8 letter names, 25% of the users have 9 letter
 * names, 24% of the users have 10 letter names, and 21% of the users
 * have 11 letter names.<p>
 * At the current state, this utility can generate 36,058,857,640 non-duplicate
 * names.
 *
 * @author Akara Sucharitakul
 */
public class UserName
{

private static final char[][][] scramble =
	{{{'0'}}, {{'0'}}, {{'0'}}, {{'0'}}, {{'0'}},
	{{'r', 'b', 'd', 'm', 'f', 't', 'x', 'e', 'i', 'o', 's', 'p', 'a', 'l',
	'g', 'h', 'n', 'w', 'z', 'q', 'u', 'v', 'k', 'j', 'c', 'y'},
	{'h', 'i', 'b', 'f', '2', 'o', 'd', 'u', '7', '9', 'w', 'v', 'j', '3', '6',
	'g', 'z', 'p', 'n', '8', 'y', 'k', 'x', 'q', '5', 's', 't', 'a', '1', '4',
	'0', 'e', 'c', 'm', 'r', 'l', '_'},
	{'y', '3', 'w', 'h', 'v', 'u', 'e', 'q', 'm', 'z', '9', 'x', 'k', '7', 'p',
	'r', 't', 'n', '4', 'f', 'o', '2', '5', 'i', 'l', 'a', '6', '8', 'g', '1',
	'_', 'b', 'd', '0', 's', 'j', 'c'},
	{'6', 'c', 'f', '3', '2', 'v', 'm', 'l', 'x', 'k', 'e', '_', '7', 'a', 's',
	'0', 'j', 'n', 'd', 'z', 'u', '4', 't', 'o', 'g', '5', 'w', 'h', 'p', 'b',
	'i', '1', 'q', '8', 'r', 'y', '9'},
	{'i', 'e', 'p', 'g', 'h', 'b', '1', 'a', 'x', 'm', 'o', '7', 'l', 'u', 'z',
	'w', '0', '8', '9', 'd', 'f', '2', '_', '5', 'c', 'n', 'r', '6', 'j', 'v',
	'q', 't', 's', '4', 'k', '3', 'y'},
	{'t', 'n', 'v', 'g', 's', 'j', 'p', 'l', 'b', '8', 'd', '_', 'q', 'u', 'z',
	'2', '5', '7', 'x', 'i', 'o', 'r', '9', '0', 'f', 'w', 'k', '6', '4', '3',
	'e', 'c', 'a', 'h', 'm', '1', 'y'}},
	{{'q', 'o', 'x', 'j', 'g', 'r', 'k', 'p', 'a', 'e', 'i', 'w', 'u', 'n',
	's', 'f', 'c', 'b', 'z', 'y', 't', 'v', 'm', 'h', 'l', 'd'},
	{'z', 'g', 'm', '7', 'r', 'l', 'o', 'q', 't', '0', '9', 'b', 'w', '3', '2',
	'y', '1', 'e', 'p', 's', '6', 'x', '5', 'v', 'i', 'n', '_', '4', 'a', 'k',
	'u', 'f', 'c', 'd', 'h', 'j', '8'},
	{'1', '9', 'c', 't', 'p', 'm', 'e', '5', 'f', 'y', 'r', 'g', 'w', 'j', 'i',
	'x', '3', 'u', '8', '6', 'd', 'k', 's', '4', 'b', 'l', 'h', 'q', 'n', '7',
	'2', 'z', 'a', 'o', '0', 'v', '_'},
	{'g', 'v', 'r', 'l', 'h', 'a', '4', '0', 'k', '_', '2', 'j', 'b', 't', 'p',
	'i', 'z', '5', '7', 'm', '3', '1', 'w', 'e', '6', 'u', 'f', 'y', '9', 'n',
	'x', 'o', 'c', 'd', 's', 'q', '8'},
	{'q', 'u', '0', '4', 'f', 'j', 'r', 'w', '8', '9', 't', 'k', 'h', '2', 'i',
	'b', 'n', 'g', 'z', 'x', '3', 'd', 'e', 'a', 's', '6', '1', '5', 'v', 'o',
	'_', 'l', 'm', 'y', 'c', 'p', '7'},
	{'b', '7', 'x', 'r', 'a', '8', 'z', 'm', 'q', 'i', 't', 'v', 'c', 'd', '6',
	'j', 'k', 'y', '0', '9', 'f', '3', '2', 'h', 's', 'w', 'l', '1', 'u', '_',
	'g', 'o', 'e', 'n', 'p', '5', '4'},
	{'v', 'j', '1', 'n', '8', 's', '_', 'q', 'u', 'e', '3', 'c', 'o', '9', 'm',
	'h', 't', '0', 'f', '4', 'd', 'r', '5', 'x', '2', '6', 'w', 'a', 'i', 'z',
	'7', 'b', 'l', 'k', 'g', 'y', 'p'}},
	{{'o', 'g', 'l', 'k', 'e', 'q', 'r', 'p', 't', 'w', 'u', 'h', 'j', 'a',
	'i', 'v', 'd', 'y', 'z', 'b', 'c', 'm', 'x', 'n', 'f', 's'},
	{'3', 'y', 'f', 't', '6', 'q', 'z', 'r', 'b', '1', 'j', '0', '7', '2', '_',
	'a', 'g', '9', '4', 'l', 'v', 'd', 'c', 'm', 'o', 'i', 'k', '8', '5', 'x',
	'w', 'n', 'h', 'u', 'p', 'e', 's'},
	{'d', 'v', 'l', 'b', 'j', '5', 'y', '8', 'o', 'p', '0', 'q', 'x', 'u', 's',
	'w', '7', '3', 'h', 't', '_', 'n', '2', 'c', 'm', 'r', '6', 'g', 'k', 'z',
	'e', '1', 'f', '9', '4', 'i', 'a'},
	{'a', 'f', 'y', 'o', 'w', 'z', 'b', 'i', 'd', '7', '_', 'm', 's', 'p', '1',
	'4', 'x', 'l', 'r', '9', 'j', 'q', 'k', 'v', '6', 'g', '3', 't', 'h', 'e',
	'2', '0', 'n', '5', '8', 'u', 'c'},
	{'r', 'c', 'q', 'x', '1', 'a', 'u', '7', 'k', '8', 'p', '0', '9', 'f', 'j',
	'n', 'b', '3', 'z', 'o', '_', 'd', 'v', '4', 'g', 'i', 's', 'e', 'w', 'y',
	'2', 'm', 't', '5', 'h', '6', 'l'},
	{'s', '_', '2', 'v', 'z', 'f', '1', '7', 'k', 'o', 'd', '6', '8', 'j', 'i',
	'q', '0', 'x', 'a', 'm', 'r', 't', 'w', 'h', 'y', 'n', 'l', 'u', 'c', 'p',
	'g', '4', '9', '3', '5', 'e', 'b'},
	{'u', '5', 'h', 'x', 'y', 'a', '4', '8', 'z', 'i', 'g', 's', '2', 'n', 'p',
	'b', 'q', 'o', '6', '1', '0', 'w', 'e', '3', '_', 'j', 'v', '9', 'k', 'm',
	'd', 'r', 't', '7', 'f', 'l', 'c'},
	{'t', 'z', 'n', 'y', '6', 'm', 'i', 'w', 'c', '2', 'f', 'q', 'e', 'h', '_',
	'v', 'j', '9', '0', '8', 's', '5', 'g', 'd', 'p', 'l', '4', 'u', 'o', '1',
	'k', '3', 'r', 'b', 'a', 'x', '7'}},
	{{'n', 'w', 'e', 'q', 'k', 'p', 's', 'a', 'j', 'm', 'i', 'c', 'h', 'g',
	'z', 'u', 'd', 'l', 'y', 'v', 'f', 'o', 'b', 't', 'r', 'x'},
	{'l', 'x', 'd', 'k', 'u', 'q', '5', 'r', 'w', 's', '_', 'h', 'i', 'z', 'p',
	'g', 'a', 'c', 'y', 'v', 'e', 'f', '6', 'j', 'o', '4', '8', 't', '0', '9',
	'7', '3', 'b', 'n', '1', '2', 'm'},
	{'h', '_', 'y', 'm', 'a', 'v', 'r', 'k', 'j', 'i', 't', '3', '5', '2', 'f',
	'u', 'd', '4', 'n', 'b', 'e', '1', 'q', '0', 'c', 'p', '8', '7', 'x', '6',
	'9', 'o', 's', 'w', 'l', 'g', 'z'},
	{'k', 'y', 'a', '4', 'f', 'i', '0', '_', '1', 'b', 'p', '9', 'x', 'w', 'v',
	'n', 'd', 't', 'm', 'u', 'q', 'l', '6', 'o', '5', 'j', 's', '8', '7', 'h',
	'z', 'e', 'r', '3', 'c', '2', 'g'},
	{'y', 'q', '2', 'j', 'z', 'f', 'h', 'r', 'x', 'g', 'w', '9', '5', '0', '3',
	'4', 't', 'a', 'e', '7', 'b', 'p', 'd', 'c', 's', 'v', '_', '6', 'k', 'o',
	'i', 'l', 'n', 'u', '8', 'm', '1'},
	{'a', '0', 's', '5', 'h', '4', 'c', 'x', '8', 'w', 'r', '1', 't', '6', 'u',
	'7', 'e', 'b', 'd', 'j', 'i', '3', 'f', 'y', '2', 'v', 'n', 'o', '_', 'q',
	'9', 'm', 'g', 'k', 'p', 'l', 'z'},
	{'o', '7', 'n', 'r', 'g', 'v', 't', 'h', 'w', '_', '5', 'z', '1', '4', 'y',
	'a', '3', 'u', 'k', 'f', 'e', 'b', 'm', 'i', 'x', 'l', 'd', '0', 'c', '9',
	'p', '2', 'j', '8', 's', 'q', '6'},
	{'u', '2', 'o', 'a', 'k', '3', '_', 'i', 'z', 'r', 'e', 'x', '6', 'v', '4',
	'y', 'n', 'f', 'm', 'd', '7', '1', 'p', 'h', 't', 'l', '0', '8', '5', 'w',
	'c', '9', 'g', 's', 'b', 'q', 'j'},
	{'h', 'o', '3', '5', 'g', 'j', 'p', 'y', 'r', '4', 'q', '7', '9', '6', 't',
	'e', 'z', 'v', 'f', 'w', '1', 'i', 'b', '0', 'l', 's', 'a', 'x', '_', 'k',
	'u', 'c', 'd', 'n', '2', '8', 'm'}},
	{{'p', 'f', 'x', 'n', 'v', 'q', 'w', 'r', 'd', 'i', 'h', 'z', 'b', 't',
	'g', 'l', 'o', 'c', 'y', 's', 'u', 'm', 'e', 'k', 'a', 'j'},
	{'k', 'e', 'u', '0', 't', 'o', 'd', 'x', '_', '4', 'l', 'y', '7', '2', 'z',
	'9', 'a', 'm', 'r', 'b', 'f', '8', 'q', 's', 'n', 'g', '5', 'i', 'j', 'p',
	'6', '1', 'v', 'h', 'w', 'c', '3'},
	{'r', '4', '5', 'q', '_', 's', '2', 'p', 'z', 'n', 'o', 'm', 'g', 'a', 'c',
	'u', 'v', 'j', 'e', 'k', 'x', '7', 'l', 'd', 'w', '0', '8', 'i', '6', 'h',
	'3', '1', 'y', '9', 'f', 't', 'b'},
	{'q', 'x', 'i', 'g', 'z', 'v', '2', 'u', '4', 's', '1', 'd', 'k', 'n', 'a',
	'5', '7', 't', 'y', '9', 'm', 'r', '8', 'j', '0', 'b', 'c', 'o', 'l', 'h',
	'f', '6', 'e', 'p', '3', 'w', '_'},
	{'c', 'k', '1', 'd', '6', '_', 'o', '5', 'm', 'w', 'e', 'g', 'b', '0', 'q',
	't', '8', 'r', 'u', 'i', 'n', 'j', 'x', 's', '7', '2', 'z', 'f', 'l', '4',
	'v', 'y', 'a', 'p', 'h', '9', '3'},
	{'t', 'v', '_', 'j', 'w', '5', 'l', '8', 's', 'n', '9', 'e', '0', 'd', 'x',
	'r', 'c', '2', '6', 'a', 'k', '3', 'g', '1', 'u', 'y', '4', 'o', 'q', 'f',
	'm', 'p', 'b', 'z', '7', 'i', 'h'},
	{'k', 'm', 'v', 'p', 'w', '9', 'x', 'j', 't', '_', 'i', 'h', 'a', '5', 'd',
	'e', 'z', 'n', 'f', '4', 'o', '0', 'l', '6', 'c', '8', 's', 'b', 'g', '2',
	'1', '3', 'r', 'y', '7', 'u', 'q'},
	{'i', 'a', 'b', 'v', 'l', 'y', 't', 'f', 'z', '8', '3', 'e', '2', 'p', 'r',
	'u', '6', '7', 's', '5', 'c', 'k', '0', 'j', 'm', 'n', 'h', 'd', '1', 'g',
	'o', 'w', 'x', '4', 'q', '9', '_'},
	{'8', '9', 'x', 'f', 'h', '7', '0', '4', 'o', '2', 'g', 'v', 'j', 't', 'e',
	'1', '3', 'q', 'w', 'a', '_', 'n', 'd', 'l', 'i', '6', 'm', 's', 'c', 'b',
	'y', 'z', '5', 'u', 'k', 'p', 'r'},
	{'f', '5', '_', 's', 'p', 'o', 'r', 'w', '1', 'y', '4', 'g', 'e', '8', 'b',
	'a', 'c', '0', 'v', 'h', 'm', 'q', 't', '6', 'u', 'n', 'd', '3', 'x', 'i',
	'7', 'z', 'j', 'k', '9', 'l', '2'}},
	{{'o', 't', 'q', 'k', 'b', 'p', 'a', 'f', 'x', 'd', 'c', 's', 'w', 'e',
	'y', 'r', 'l', 'm', 'z', 'i', 'v', 'g', 'n', 'j', 'h', 'u'},
	{'1', 'f', '5', 'u', 'j', 'q', 'r', 'w', 'i', 'x', '2', 'h', 'o', '0', '6',
	'p', 'c', 'd', 'z', 't', 'l', 'n', '_', '7', '3', 'b', 'a', 'g', 'e', '9',
	'y', '4', 'v', 's', '8', 'k', 'm'},
	{'v', '9', 'u', '0', 'r', 'g', '_', '4', 'y', 'n', 'j', '7', 'p', 'k', '2',
	't', '1', 'o', 'e', 'b', 'f', 'i', 'x', 'z', 'c', 'q', '6', '8', 'w', 'm',
	'd', 'h', '5', 'a', 's', '3', 'l'},
	{'_', 'v', '8', 'y', 'g', 'e', 'o', 'b', 'r', 't', 'n', '1', 'm', '6', '5',
	'k', 'h', 'd', 'w', 's', 'x', 'q', 'l', '4', 'j', 'z', 'i', '7', '3', 'c',
	'p', 'a', '2', 'u', 'f', '0', '9'},
	{'j', 'z', 'd', '_', '3', '5', '9', 'p', '8', 'l', 'k', 'r', '7', 'q', '6',
	'a', 's', 'w', 'b', '0', 'f', 'x', 'e', 'v', 't', 'o', '4', 'h', '2', '1',
	'c', 'm', 'i', 'u', 'y', 'g', 'n'},
	{'a', 'f', '0', 'n', 'h', 'v', 'u', '7', '6', 'j', 'p', 'b', 'm', '_', '5',
	'9', 'q', 'd', '3', 'y', '4', 'i', '2', 'k', 'z', 't', 'w', 'g', '8', 'c',
	'r', '1', 'e', 'x', 'l', 'o', 's'},
	{'e', 'o', 'p', '9', 'f', 'u', 'j', 'y', '0', 'g', 's', 'r', '6', 't', 'n',
	'b', 'a', 'x', 'w', 'l', 'i', 'c', '1', 'k', 'q', '5', '7', 'd', 'h', '_',
	'2', 'z', '4', '3', 'v', 'm', '8'},
	{'5', 'f', 'b', 'g', 'v', 'a', '8', 'd', 'm', '_', 'k', 'o', 'u', '2', 'w',
	'x', 'c', '9', 'j', '7', 'n', 'e', '4', 'l', 'p', 'r', 'h', 'q', 'i', '1',
	'0', 't', '6', 's', 'z', 'y', '3'},
	{'s', 'j', 'h', 'z', '1', 'b', 'w', '2', 'y', 'l', 'u', '8', 'd', 'q', 'a',
	'5', 'x', 'k', '0', 'e', 't', 'v', '9', '7', 'n', 'i', 'p', 'm', 'r', '_',
	'3', '4', '6', 'o', 'c', 'g', 'f'},
	{'v', 'c', 'q', '1', 'a', '0', 'o', 'i', '3', '6', 'e', 'b', '9', 'w', 'x',
	'2', '5', 'l', 'd', 'z', 's', 'n', 'h', 'g', 'r', 'y', '8', 't', 'k', '4',
	'_', 'p', 'j', 'f', 'u', 'm', '7'},
	{'k', '4', 's', 'q', 'i', 'j', 'v', 'e', 'y', '8', 'l', 'u', '_', 'o', 'c',
	'g', 'd', 'r', 'x', 'b', 'a', 'w', '9', 'p', '3', '5', 'n', 'f', '1', '2',
	'0', 'h', 'z', 't', '7', '6', 'm'}}};
	
	// Note that these sum up to 100
	// private static final int[] length_percent = { 0, 0, 5, 8, 17, 25, 24, 21 };
	private static final int[] length_percent = { 0, 0, 0, 0, 0, 5, 8, 17, 25, 24, 21 };
	
	private static int[] selector = new int[length_percent.length];
	
	static {
		selector[0] = length_percent[0];
		for ( int i = 1; i < selector.length; i++ )
		{
			selector[i] = selector[i - 1] + length_percent[i];
		}
	}
	
	/**
	 * Obtains the unique user name for the given user id.
	 * 
	 * @param id    The user id.
	 * @return      The unique user name.
	 */
	public static String getUserName( long id )
	{
		// Since id starts with 1, we have to shift it to start with 0 for
		// our operations.
		--id;
		
		// We divide the ids into sets, each set has 100 users.
		int setId = (int) ( id / 100 );
		
		// Then we obtain the per-set id 0..99
		int psid = (int) ( id % 100 );
		
		// Here we reverse odd ids to ovid cluttering of shorter names
		// in the lower range and longer ones in the upper range of each
		// 100.
		if ( psid % 2 == 1 )
		{
			psid = 100 - psid;
		}
		
		// For selection, we do not want to make the same name lengths
		// contiguous. So we switch the digits on psid.
		psid = ( psid % 10 ) * 10 + ( psid / 10 );
		
		// This outcoming psid is used for digit selection.
		
		// Next, choose the length.
		int lengthSequence = 0; // This is the sequence number for the psid
								// having this length within these 100 names.
		int len; // For now, pretend 0 is OK, but we'll shift is back to 1.
		for ( len = 0; len < selector.length; len++ )
		{
			if ( psid < selector[len] )
			{
				if (len == 0)
				{
					lengthSequence = psid;
				}
				else
				{
					lengthSequence = psid - selector[len - 1];
				}
				break;
			}
		}
		// Here we shift it back so len is from 1 to whatever.
		++len;
		
		// Now as we know the id, psid, and the name length to use,
		// we have to generate the name.
		char[] name = new char[len];
		int[] offset = new int[len];
		
		// The lengthId is the unique identifier for this length and is the
		// value we use to get the name.
		int lengthId = length_percent[len - 1] * setId + lengthSequence;
		
		// Now we calculate the initial offset into the scrambled chars
		// using last digit first.
		for ( int i = 0; i < len; i++ )
		{
			offset[i] = lengthId % scramble[len - 1][i].length;
			lengthId /= scramble[len - 1][i].length;
		}
		
		// The first offset is now taken as is.
		name[0] = scramble[len - 1][0][offset[0]];
		
		for ( int i = 1; i < len; i++ )
		{
			// We adjust the offset once again to avoid same name lenghts
			// to have many of the same characters. We use the previous
			// offset to step up the current offset.
			offset[i] = ( offset[i] + offset[i - 1] ) % scramble[len - 1][i].length;
			// And finally we assign the rest of the name.
			name[i] = scramble[len - 1][i][offset[i]];
		}
		
		return new String( name );
	}
	
	private static void spaceSize()
	{
		long minSpace = Long.MAX_VALUE;
		int digit = 0;
		for ( int i = 0; i < length_percent.length; i++ )
		{
			if ( length_percent[i] == 0 )
			{
				continue;
			}
			long space = 26l;
			for ( int j = 1; j < i + 1; j++ )
			{
				space *= 37l;
			}
			space = space * 100l / length_percent[i];
			if ( space >= 0 && space < minSpace )
			{
				minSpace = space;
				digit = i + 1;
			}
		}
		System.out.println( "The maximum names of the current config is " + minSpace );
		System.out.print( "The space is limited by length " + digit );
	}
	
	/**
	 * The main method is used for testing user name generation.
	 * It prints out all the user names generated and the
	 * percentages of user names for each length. It also
	 * reports duplicate users, whenever found.
	 */
	public static void main( String[] args ) throws Exception
	{
		if ( args.length == 0 )
		{
			spaceSize();
		}
		else
		{
			long limit = Long.parseLong( args[0] ) * 100;
			FileWriter tmpfile;
			if ( args.length <= 1 )
			{
				tmpfile = new FileWriter( "/tmp/users.txt" );
			}
			else
			{
				tmpfile = new FileWriter( args[1] );
			}
			testGen( limit, tmpfile );
		}
	}
	
	private static void testGen( long limit, FileWriter tmpfile ) throws IOException
	{
		int[] nameLength = new int[length_percent.length];
		HashSet<String> set = new HashSet<String>( (int) (limit - 1) );
		for ( long i = 1; i <= limit; i++ )
		{
			String name = getUserName( i );
			System.out.println( "User " + i + ": " + name );
			tmpfile.write( name + "\n" );
			++nameLength[name.length() - 1];
			if ( !set.add( name ) )
			{
				System.out.println( "Alert! Duplicate name: " + name );
			}
		}
		tmpfile.close();
		long count = 0;
		for ( int i = 0; i < nameLength.length; i++ )
		{
			count += nameLength[i];
		}
		for ( int i = 0; i < nameLength.length; i++ )
		{
			System.out.println( "Length " + ( i + 1 ) + ", count " +
					nameLength[i] + ", " + ( 100d * nameLength[i] / count ) + "%");
		}
	}
	
}
